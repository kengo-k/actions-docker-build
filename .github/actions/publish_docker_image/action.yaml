name: 'Publish Docker images'
description: 'Dockerfileに変更があった場合イメージをビルドしてGHCRにPUSHする'
inputs:
  token:
    description: 'token'
    required: true
  use_image_tag_by_branch:
    required: false
    default: true
  use_image_tag_by_tag:
    required: false
    default: true
  use_image_tag_by_default:
    required: false
    default: true

runs:
  using: 'composite'
  steps:

    # Github Container Registryにログインする
    - name: login to ghcr
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }}

    # 最新のコミットを取得しておく
    - name: checkout latest commit
      uses: actions/checkout@v2

    # PUSH対象がブランチであるかタグであるかを判定する
    - name: Determine if push event is for branch or tag
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/heads/* ]]; then
          echo "::info:: push_event_type: branch"
          echo "push_event_type=BRANCH" >> $GITHUB_ENV
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "::info:: push_event_type: tag -----"
          echo "push_event_type=TAG" >> $GITHUB_ENV
        fi
    
    # PUSH対象がタグであった場合、リポジトリ内の全てのDockerfileの一覧を取得する
    - name: Determine if push event is for branch or tag
      shell: bash
      if: ${{ env.push_event_type == 'TAG' && inputs.use_image_tag_by_tag == 'true'}}
      run: |
        changed_dockerfiles=$(find . -type f -name 'Dockerfile' || true)
        echo "----- [DEBUG] target dockerfiles: $changed_dockerfiles -----"
        echo "changed_dockerfiles=$changed_dockerfiles" >> $GITHUB_ENV
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "----- [DEBUG] tag: $TAG_NAME -----"
        echo "tag_list=$TAG_NAME" >> $GITHUB_ENV

    # PUSH対象がブランチの場合、前回PUSHされた際のコミットを取得する
    - name: checkout before commit
      if: ${{ env.push_event_type == 'BRANCH' }}
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.before }}

    # PUSH対象がブランチの場合、前回のPUSHから今回のPUSHまでの間に変更された全てのDockerfileの一覧を取得する
    - name: find changed Dockerfiles
      if: ${{ env.push_event_type == 'BRANCH' }}
      shell: bash
      run: |
        # get target branch name
        echo "GITHUB_REF: $GITHUB_REF"
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "----- [DEBUG] branch: $BRANCH_NAME -----"
        echo "branch=$BRANCH_NAME" >> $GITHUB_ENV

        # get changed dockerfile between previsou and current commit
        echo "----- [DEBUG] previous commit: ${{ github.event.before }} -----"
        echo "----- [DEBUG] latest commit: ${{ github.sha }} -----"
        git fetch origin $GITHUB_SHA:refs/remotes/origin/$BRANCH_NAME
        git checkout $GITHUB_SHA
        changed_dockerfiles=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep Dockerfile || true)
        echo "----- [DEBUG] target dockerfiles: $changed_dockerfiles -----"
        echo "changed_dockerfiles=$changed_dockerfiles" >> $GITHUB_ENV

        # create taglist
        taglist=""
        if [ "${{ inputs.use_image_tag_by_default }}" == "true" ]; then
          taglist="$taglist $(TZ=Asia/Tokyo date +'%Y%m%d%H%M')-${GITHUB_SHA:0:7}"
        fi
        if [ "${{ inputs.use_image_tag_by_branch }}" == "true" ]; then
          taglist="$taglist $BRANCH_NAME"
        fi        
        echo "----- [DEBUG] target image tags: $taglist -----"  
        echo "tag_list=$taglist" >> $GITHUB_ENV

    # ビルド対象のDockerfileの一覧とイメージタグの一覧を使用してイメージのビルドとPUSHを行う
    - name: publish
      if: ${{ env.changed_dockerfiles != '' }}
      shell: bash
      run: |
        echo "prev output: ${{ env.changed_dockerfiles }}"
        for dockerfile in ${{ env.changed_dockerfiles }}; do
          context=$(dirname $dockerfile)
          image=$(dirname $dockerfile | xargs basename)
          echo "image: $image"
        
          taglist="${{ env.taglist }} latest"
          tags=""
          prefix=ghcr.io/${{ github.actor }}/$image
          for tag in $taglist; do
            tags+=" -t $prefix:$tag"
          done
          
          echo "docker build $tags -f $dockerfile $context"
          docker build $tags -f $dockerfile $(dirname $dockerfile)
          for tag in $taglist; do
            echo "docker push ghcr.io/${{ github.actor }}/$image:$tag"
            docker push ghcr.io/${{ github.actor }}/$image:$tag
          done
        done
